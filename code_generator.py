import pyotp
import datetime
import asyncio
from database import get_key_from_db, get_service_name_from_db
from aiogram import types
from bot_utils import bot, timers
from bot_messages import NO_KEY_MESSAGE, CODE_EXPIRED_MESSAGE


# –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ totp-–∫–æ–¥–∞
async def generate_totp(key):
    totp = pyotp.TOTP(key)
    code = totp.now()
    remaining_time = totp.interval - (datetime.datetime.now().timestamp() % totp.interval)
    return code, remaining_time


# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–¥–∞
async def get_code(user_id, code_number, call):
    markup = types.InlineKeyboardMarkup()
    back_btn = types.InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='back')
    markup.row(back_btn)
    key = get_key_from_db(user_id, code_number)[0]
    if key is None:
        await bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=NO_KEY_MESSAGE
                                    , reply_markup=markup)
        return
    service_name = get_service_name_from_db(user_id, code_number)[0]
    code, remaining_time = await generate_totp(key)
    await update_message_loop(call.message.chat.id, call.message.message_id, remaining_time, code, service_name, markup,
                              code_number)


# –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–æ–¥–æ–º
async def update_message_loop(chat_id, message_id, remaining_time, totp_code, service_name, markup, code_number):
    start_time = asyncio.get_running_loop().time()
    if remaining_time <= 0:
        if message_id in timers:
            timers[message_id].cancel()
            del timers[message_id]
        refresh_btn = types.InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–¥',
                                                 callback_data=f'get_code:{code_number}')
        markup.row(refresh_btn)
        await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=CODE_EXPIRED_MESSAGE,
                                    reply_markup=markup)
        return
    time_bar = await get_time_bar(remaining_time, 30)
    new_text = f"–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ {service_name}:<pre>{totp_code}</pre>(–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å)\n\n–í—Ä–µ–º—è –¥–µ–π—Å—Ç–≤–∏—è: "\
               f"{await format_time(remaining_time)}\n{time_bar} "
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id, text=new_text, reply_markup=markup,
                                parse_mode="HTML")
    elapsed_time = asyncio.get_running_loop().time() - start_time
    wait_time = max(1 - elapsed_time, 0)
    await asyncio.sleep(wait_time)
    timers[message_id] = asyncio.create_task(
        update_message_loop(chat_id, message_id, remaining_time - 1, totp_code, service_name, markup, code_number))


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä–æ–∫—É —ç–º–æ–¥–∑–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
async def get_time_bar(seconds_left, total_seconds):
    bar = "üü©" * int(seconds_left / total_seconds * 15)
    bar += "üü•" * (15 - len(bar))
    return f"{bar}"


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def format_time(seconds):
    minutes, seconds = divmod(seconds, 60)
    return "{:02d}:{:02d}".format(int(minutes), int(seconds))
